name: Release Windows App

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Version tag'
        required: true
        default: '1.0.0'

jobs:
  release:
    name: Release Windows App
    runs-on: windows-latest
    strategy:
      matrix:
        platform:
          - windows/amd64
    permissions:
      contents: write

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Normalize platform tag
        id: normalize_platform
        shell: bash
        run: |
          tag=$(echo ${{ matrix.platform }} | sed -e 's/\//_/g')
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

      - name: Normalize version tag
        id: normalize_version
        shell: bash
        run: |
          if [ "${{ github.event.release.tag_name }}" != "" ]; then
            version=$(echo ${{ github.event.release.tag_name }} | sed -e 's/v//g')
            echo "version=$version" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.event.inputs.tag }}" != "" ]; then
            version=$(echo ${{ github.event.inputs.tag }} | sed -e 's/v//g')
            echo "version=$version" >> "$GITHUB_OUTPUT"
          elif [[ "$GITHUB_REF" == refs/tags/v* ]]; then
            # Handle tag push event
            version=$(echo $GITHUB_REF | sed -e 's/refs\/tags\/v//g')
            echo "version=$version" >> "$GITHUB_OUTPUT"
          else
            # Default version or extract from ref if it looks like a tag
            if [[ "$GITHUB_REF" == v* ]]; then
              version=$(echo $GITHUB_REF | sed -e 's/v//g')
              echo "version=$version" >> "$GITHUB_OUTPUT"
            else
              # Fallback to a default version
              echo "version=1.0.0" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Install wails
        shell: bash
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Build frontend assets
        shell: bash
        run: |
          cd frontend
          npm install

      - name: Build wails app for Windows
        shell: bash
        run: |
          CGO_ENABLED=1 wails build -platform ${{ matrix.platform }} \
          -ldflags "-X main.version=v${{ steps.normalize_version.outputs.version }}" \
          -o claudeConfigManager-${{ steps.normalize_platform.outputs.tag }}
          echo "Wails build completed with exit code $?"

      - name: Debug - List build directory
        shell: bash
        run: |
          echo "Build directory contents:"
          find build -type f | sort
          echo "Bin directory contents:"
          find build/bin -type f | sort
          echo "All build/bin contents with details:"
          ls -la build/bin/
          echo "Checking if executable exists:"
          ls -la build/bin/claudeConfigManager-windows_amd64 || echo "Main executable not found"
          echo "Dist directory contents (before NSIS):"
          ls -la dist/ 2>/dev/null || echo "Dist directory does not exist yet"

      - name: Package up installer
        shell: bash
        run: |
          # Create installer using NSIS
          mkdir -p dist
          echo "Running NSIS with VERSION=${{ steps.normalize_version.outputs.version }}"
          makensis -DVERSION=${{ steps.normalize_version.outputs.version }} build/installer.nsi
          echo "NSIS completed with exit code $?"
          
          # Move the installer to dist directory
          if [ -f "build/claude-config-manager-setup.exe" ]; then
            echo "Moving installer to dist directory"
            mv "build/claude-config-manager-setup.exe" "dist/"
          else
            echo "Installer not found in build directory"
            ls -la build/ 2>/dev/null || echo "Build directory does not exist"
          fi
          
          echo "Dist directory contents (after NSIS):"
          ls -la dist/ 2>/dev/null || echo "Dist directory does not exist"
          
          # Also create a zip of the portable executable
          echo "Creating portable version..."
          cd build/bin
          zip -j ../dist/claudeConfigManager_${{ steps.normalize_version.outputs.version }}_${{ steps.normalize_platform.outputs.tag }}_portable.zip claudeConfigManager-${{ steps.normalize_platform.outputs.tag }}
          cd ../..
          echo "Dist directory contents (after portable zip):"
          ls -la dist/ 2>/dev/null || echo "Dist directory does not exist"

      - name: Rename installer
        shell: bash
        run: |
          echo "Looking for installer files in dist directory:"
          ls -la dist/ || echo "dist directory does not exist"
          ORIGINAL_FILE="dist/claude-config-manager-setup.exe"
          NEW_FILE="claudeConfigManager_${{ steps.normalize_version.outputs.version }}_${{ steps.normalize_platform.outputs.tag }}_installer.exe"
          if [ -f "$ORIGINAL_FILE" ]; then
            echo "Found original file, renaming to: $NEW_FILE"
            mv "$ORIGINAL_FILE" "$NEW_FILE"
          else
            echo "Installer file not found: $ORIGINAL_FILE"
            echo "Checking all files in dist directory:"
            ls -la dist/ 2>/dev/null || echo "No dist directory found"
            find dist -type f 2>/dev/null || echo "No files found in dist"
            exit 1
          fi

      - name: Upload release asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.normalize_version.outputs.version }}
          body: |
            ## Windows发行说明
            
            此版本包含Windows平台的Claude Config Manager应用程序。
            
            ### 下载选项
            - **安装程序**: claudeConfigManager_*_installer.exe - 标准Windows安装程序
            - **便携版本**: claudeConfigManager_*_portable.zip - 解压即可使用的便携版本
            
            ### 安装说明
            **使用安装程序**:
            1. 下载claudeConfigManager_*_installer.exe
            2. 运行安装程序并按照提示完成安装
            
            **使用便携版本**:
            1. 下载claudeConfigManager_*_portable.zip
            2. 解压到任意目录
            3. 直接运行claudeConfigManager-windows_amd64.exe
            
            ### 使用说明
            Claude Config Manager是一个用于管理Claude Code Router配置的图形化工具。启动应用后，您可以：
            - 配置API密钥和代理设置
            - 管理模型提供商和路由规则
            - 保存和加载配置文件
          files: |
            claudeConfigManager_${{ steps.normalize_version.outputs.version }}_${{ steps.normalize_platform.outputs.tag }}_installer.exe
            dist/claudeConfigManager_${{ steps.normalize_version.outputs.version }}_${{ steps.normalize_platform.outputs.tag }}_portable.zip
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}