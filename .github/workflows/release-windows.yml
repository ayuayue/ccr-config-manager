name: Release Windows App

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Version tag'
        required: true
        default: '1.0.0'

jobs:
  release:
    name: Release Windows App
    runs-on: windows-latest
    strategy:
      matrix:
        platform:
          - windows/amd64
    permissions:
      contents: write

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Normalize platform tag
        id: normalize_platform
        shell: bash
        run: |
          tag=$(echo ${{ matrix.platform }} | sed -e 's/\//_/g')
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

      - name: Normalize version tag
        id: normalize_version
        shell: bash
        run: |
          if [ "${{ github.event.release.tag_name }}" != "" ]; then
            version=$(echo ${{ github.event.release.tag_name }} | sed -e 's/v//g')
            echo "version=$version" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.event.inputs.tag }}" != "" ]; then
            version=$(echo ${{ github.event.inputs.tag }} | sed -e 's/v//g')
            echo "version=$version" >> "$GITHUB_OUTPUT"
          elif [[ "$GITHUB_REF" == refs/tags/v* ]]; then
            # Handle tag push event
            version=$(echo $GITHUB_REF | sed -e 's/refs\/tags\/v//g')
            echo "version=$version" >> "$GITHUB_OUTPUT"
          else
            # Default version or extract from ref if it looks like a tag
            if [[ "$GITHUB_REF" == v* ]]; then
              version=$(echo $GITHUB_REF | sed -e 's/v//g')
              echo "version=$version" >> "$GITHUB_OUTPUT"
            else
              # Fallback to a default version
              echo "version=1.0.0" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Install wails
        shell: bash
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Build frontend assets
        shell: bash
        run: |
          cd frontend
          npm install

      - name: Build wails app for Windows
        shell: bash
        run: |
          CGO_ENABLED=1 wails build -platform ${{ matrix.platform }} \
          -ldflags "-X main.version=v${{ steps.normalize_version.outputs.version }}" \
          -o claudeConfigManager-${{ steps.normalize_platform.outputs.tag }}
          echo "Wails build completed with exit code $?"

      - name: Debug - List build directory
        shell: bash
        run: |
          echo "Build directory contents:"
          find build -type f | sort
          echo "Bin directory contents:"
          find build/bin -type f | sort
          echo "All build/bin contents with details:"
          ls -la build/bin/
          echo "Checking if executable exists:"
          ls -la build/bin/claudeConfigManager-windows_amd64 || echo "Main executable not found"
          echo "Dist directory contents (before NSIS):"
          ls -la dist/ 2>/dev/null || echo "Dist directory does not exist yet"

      - name: Install NSIS
        shell: bash
        run: |
          choco install nsis -y
          echo "NSIS installed"

      - name: Package up installer
        shell: bash
        run: |
          # Create installer using NSIS
          mkdir -p dist
          echo "Running NSIS with VERSION=${{ steps.normalize_version.outputs.version }}"
          cd build
          "/c/Program Files (x86)/NSIS/makensis.exe" -DVERSION=${{ steps.normalize_version.outputs.version }} installer.nsi
          cd ..
          echo "NSIS completed with exit code $?"
          
          # Move the installer to dist directory
          if [ -f "build/claude-config-manager-setup.exe" ]; then
            echo "Moving installer to dist directory"
            mv "build/claude-config-manager-setup.exe" "dist/"
          else
            echo "Installer not found in build directory"
            ls -la build/ 2>/dev/null || echo "Build directory does not exist"
            # List all files in build directory to help debug
            find build -type f | sort
          fi
          
          echo "Dist directory contents (after NSIS):"
          ls -la dist/ 2>/dev/null || echo "Dist directory does not exist"
          
          # Also create a zip of the portable executable
          echo "Creating portable version..."
          # Install zip command on Windows
          choco install zip -y
          export PATH="/c/ProgramData/chocolatey/bin:$PATH"
          
          # Ensure dist directory exists
          mkdir -p dist
          
          # Use absolute path for zip command to avoid path issues
          DIST_DIR="$(pwd)/dist"
          BUILD_BIN_DIR="$(pwd)/build/bin"
          
          # Wails on Windows creates executable without .exe extension
          EXECUTABLE_NAME="claudeConfigManager-${{ steps.normalize_platform.outputs.tag }}"
          ZIP_FILE_NAME="claudeConfigManager_${{ steps.normalize_version.outputs.version }}_${{ steps.normalize_platform.outputs.tag }}_portable.zip"
          PORTABLE_EXE_NAME="claudeConfigManager-${{ steps.normalize_platform.outputs.tag }}.exe"
          
          # Check if the executable exists (without .exe extension)
          if [ -f "build/bin/$EXECUTABLE_NAME" ]; then
            echo "Found executable (without .exe extension), creating zip with .exe extension..."
            cd "$BUILD_BIN_DIR"
            # Create zip with the executable renamed to have .exe extension
            cp "$EXECUTABLE_NAME" "$PORTABLE_EXE_NAME"
            zip -j "$DIST_DIR/$ZIP_FILE_NAME" "$PORTABLE_EXE_NAME"
            rm "$PORTABLE_EXE_NAME"
            cd "$GITHUB_WORKSPACE"
            echo "Created portable zip with correct .exe extension"
          else
            echo "Executable not found, listing build/bin contents:"
            ls -la build/bin/ 2>/dev/null || echo "build/bin directory does not exist"
            # List all files to help debug
            find build/bin -type f 2>/dev/null || echo "No files found in build/bin"
          fi
          
          echo "Dist directory contents (after portable zip):"
          ls -la dist/ 2>/dev/null || echo "Dist directory does not exist"

      - name: Rename installer
        shell: bash
        run: |
          echo "Looking for installer files in dist directory:"
          ls -la dist/ || echo "dist directory does not exist"
          
          # Use absolute paths to avoid issues
          WORKSPACE_DIR="$(pwd)"
          DIST_DIR="$WORKSPACE_DIR/dist"
          BUILD_DIR="$WORKSPACE_DIR/build"
          
          # First check if the installer is already in dist directory
          if [ -f "$DIST_DIR/claude-config-manager-setup.exe" ]; then
            ORIGINAL_FILE="$DIST_DIR/claude-config-manager-setup.exe"
          else
            # If not, check if it's in build directory
            ORIGINAL_FILE="$BUILD_DIR/claude-config-manager-setup.exe"
            # Move it to dist directory if found
            if [ -f "$ORIGINAL_FILE" ]; then
              echo "Moving installer from build to dist directory"
              mv "$ORIGINAL_FILE" "$DIST_DIR/"
            fi
            ORIGINAL_FILE="$DIST_DIR/claude-config-manager-setup.exe"
          fi
          
          NEW_FILE="$WORKSPACE_DIR/claudeConfigManager_${{ steps.normalize_version.outputs.version }}_${{ steps.normalize_platform.outputs.tag }}_installer.exe"
          if [ -f "$ORIGINAL_FILE" ]; then
            echo "Found original file, renaming to: $NEW_FILE"
            mv "$ORIGINAL_FILE" "$NEW_FILE"
          else
            echo "Installer file not found: $ORIGINAL_FILE"
            echo "Checking all files in dist directory:"
            ls -la "$DIST_DIR"/ 2>/dev/null || echo "No dist directory found"
            find "$DIST_DIR" -type f 2>/dev/null || echo "No files found in dist"
            # Also check build directory
            echo "Checking all files in build directory:"
            ls -la "$BUILD_DIR"/ 2>/dev/null || echo "No build directory found"
            find "$BUILD_DIR" -type f 2>/dev/null || echo "No files found in build"
            exit 1
          fi

      - name: Ensure correct directory before upload
        shell: bash
        run: |
          echo "Current directory: $(pwd)"
          echo "Listing files to be uploaded:"
          ls -la claudeConfigManager_${{ steps.normalize_version.outputs.version }}_${{ steps.normalize_platform.outputs.tag }}_installer.exe 2>/dev/null || echo "Installer not found in current directory"
          ls -la dist/claudeConfigManager_${{ steps.normalize_version.outputs.version }}_${{ steps.normalize_platform.outputs.tag }}_portable.zip 2>/dev/null || echo "Portable zip not found in dist directory"
          
      - name: Upload release asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.normalize_version.outputs.version }}
          body: |
            ## Windows发行说明
            
            此版本包含Windows平台的Claude Config Manager应用程序。
            
            ### 下载选项
            - **安装程序**: claudeConfigManager_*_installer.exe - 标准Windows安装程序
            - **便携版本**: claudeConfigManager_*_portable.zip - 解压即可使用的便携版本
            
            ### 安装说明
            **使用安装程序**:
            1. 下载claudeConfigManager_*_installer.exe
            2. 运行安装程序并按照提示完成安装
            
            **使用便携版本**:
            1. 下载claudeConfigManager_*_portable.zip
            2. 解压到任意目录
            3. 直接运行claudeConfigManager-windows_amd64.exe
            
            ### 使用说明
            Claude Config Manager是一个用于管理Claude Code Router配置的图形化工具。启动应用后，您可以：
            - 配置API密钥和代理设置
            - 管理模型提供商和路由规则
            - 保存和加载配置文件
          files: |
            claudeConfigManager_${{ steps.normalize_version.outputs.version }}_${{ steps.normalize_platform.outputs.tag }}_installer.exe
            dist/claudeConfigManager_${{ steps.normalize_version.outputs.version }}_${{ steps.normalize_platform.outputs.tag }}_portable.zip
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}