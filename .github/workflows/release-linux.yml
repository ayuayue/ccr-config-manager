name: Release Linux App

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Version tag'
        required: true
        default: '1.0.0'

jobs:
  release:
    name: Release Linux App
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        platform:
          - linux/amd64
    permissions:
      contents: write

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Normalize platform tag
        id: normalize_platform
        shell: bash
        run: |
          tag=$(echo ${{ matrix.platform }} | sed -e 's/\//_/g')
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

      - name: Normalize version tag
        id: normalize_version
        shell: bash
        run: |
          if [ "${{ github.event.release.tag_name }}" != "" ]; then
            version=$(echo ${{ github.event.release.tag_name }} | sed -e 's/v//g')
            echo "version=$version" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.event.inputs.tag }}" != "" ]; then
            version=$(echo ${{ github.event.inputs.tag }} | sed -e 's/v//g')
            echo "version=$version" >> "$GITHUB_OUTPUT"
          elif [[ "$GITHUB_REF" == refs/tags/v* ]]; then
            # Handle tag push event
            version=$(echo $GITHUB_REF | sed -e 's/refs\/tags\/v//g')
            echo "version=$version" >> "$GITHUB_OUTPUT"
          else
            # Default version or extract from ref if it looks like a tag
            if [[ "$GITHUB_REF" == v* ]]; then
              version=$(echo $GITHUB_REF | sed -e 's/v//g')
              echo "version=$version" >> "$GITHUB_OUTPUT"
            else
              # Fallback to a default version
              echo "version=1.0.0" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Install wails
        shell: bash
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install Ubuntu prerequisites
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Build frontend assets
        shell: bash
        run: |
          cd frontend
          npm install

      - name: Build wails app for Linux
        shell: bash
        run: |
          CGO_ENABLED=1 wails build -platform ${{ matrix.platform }} \
          -ldflags "-X main.version=v${{ steps.normalize_version.outputs.version }}" \
          -o claudeConfigManager-${{ steps.normalize_platform.outputs.tag }}

      - name: Debug - List build directory
        shell: bash
        run: |
          echo "Build directory contents:"
          find build -type f | sort
          echo "Bin directory contents:"
          find build/bin -type f | sort

      - name: Create tar.gz archive
        shell: bash
        run: |
          mkdir -p dist
          EXECUTABLE="build/bin/claudeConfigManager-${{ steps.normalize_platform.outputs.tag }}"
          if [ -f "$EXECUTABLE" ]; then
            echo "Creating archive for: $EXECUTABLE"
            tar -czvf dist/claudeConfigManager_${{ steps.normalize_version.outputs.version }}_${{ steps.normalize_platform.outputs.tag }}.tar.gz -C build/bin claudeConfigManager-${{ steps.normalize_platform.outputs.tag }}
          else
            echo "Linux executable not found: $EXECUTABLE"
            echo "Checking all files in build/bin:"
            ls -la build/bin/
            exit 1
          fi

      - name: Upload release asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.normalize_version.outputs.version }}
          body: |
            ## Linux发行说明
            
            此版本包含Linux平台的Claude Config Manager应用程序。
            
            ### 安装说明
            1. 下载对应的tar.gz文件
            2. 解压文件：`tar -xzf claudeConfigManager_*.tar.gz`
            3. 运行可执行文件：`./claudeConfigManager-linux_amd64`
            
            ### 使用说明
            Claude Config Manager是一个用于管理Claude Code Router配置的图形化工具。启动应用后，您可以：
            - 配置API密钥和代理设置
            - 管理模型提供商和路由规则
            - 保存和加载配置文件
          files: |
            dist/claudeConfigManager_${{ steps.normalize_version.outputs.version }}_${{ steps.normalize_platform.outputs.tag }}.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}