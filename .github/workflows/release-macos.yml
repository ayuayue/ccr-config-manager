name: Release macOS App

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Version tag'
        required: true
        default: '1.0.0'

jobs:
  release:
    name: Release macOS App
    runs-on: macos-latest
    strategy:
      matrix:
        platform:
          - darwin/amd64
          - darwin/arm64

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Normalize platform tag
        id: normalize_platform
        shell: bash
        run: |
          tag=$(echo ${{ matrix.platform }} | sed -e 's/\//_/g' -e 's/darwin/mac/g' -e 's/amd64/intel/g')
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

      - name: Normalize version tag
        id: normalize_version
        shell: bash
        run: |
          if [ "${{ github.event.release.tag_name }}" == "" ]; then
            version=$(echo ${{ github.event.inputs.tag }} | sed -e 's/v//g')
            echo "version=$version" >> "$GITHUB_OUTPUT"
          else
            version=$(echo ${{ github.event.release.tag_name }} | sed -e 's/v//g')
            echo "version=$version" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Install wails
        shell: bash
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Build frontend assets
        shell: bash
        run: |
          cd frontend
          npm install

      - name: Build wails app for macOS
        shell: bash
        run: |
          CGO_ENABLED=1 wails build -platform ${{ matrix.platform }} \
          -ldflags "-X main.version=v${{ steps.normalize_version.outputs.version }}" \
          -o claudeConfigManager

      - name: Debug - List build directory
        shell: bash
        run: |
          echo "Build directory contents:"
          find build -type f | sort
          echo "Bin directory contents:"
          find build/bin -type f | sort

      - name: Create zip archive
        shell: bash
        run: |
          mkdir -p dist
          # Find and zip the macOS executable
          EXECUTABLE=$(find build/bin -name "claudeConfigManager-darwin-*" -type f -print -quit)
          if [ -n "$EXECUTABLE" ]; then
            zip dist/claudeConfigManager_${{ steps.normalize_version.outputs.version }}_${{ steps.normalize_platform.outputs.tag }}.zip "$EXECUTABLE"
          else
            echo "No macOS executable found"
            exit 1
          fi

      - name: Upload release asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.normalize_version.outputs.version }}
          files: |
            dist/claudeConfigManager_${{ steps.normalize_version.outputs.version }}_${{ steps.normalize_platform.outputs.tag }}.zip
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}